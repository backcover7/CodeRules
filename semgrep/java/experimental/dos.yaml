rules:
  - id: dos
    options:
      symbolic_propagation: true
    pattern-either:
      - patterns:
        - pattern: $THREAD.$METHOD(...)
        - metavariable-regex:
            metavariable: $THREAD
            regex: (java.lang.)?Thread(.currentThread())?
        - metavariable-regex:
            metavariable: $METHOD
            regex: sleep|stop
      - pattern-either:
        - patterns:
          - pattern: (String $REG).$METHOD(...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: matches|split|replaceFirst|replaceAll
        - patterns:
          - pattern: (java.util.regex.Pattern $REG).$METHOD(...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: compile|matches
        - patterns:
          - pattern: (org.apache.commons.lang3.RegExUtils $UTIL).$METHOD(...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: removeAll|removeFirst|removePattern|replaceAll|replaceFirst|replacePattern
      - pattern-either:
          - patterns:
            - pattern: (java.util.regex.Pattern $PATTERN).compile("$REG", ...).$METHOD(...)
            - metavariable-pattern:
                metavariable: $METHOD
                pattern-either:
                  - pattern: matcher($MAT)
                  - pattern: split($MAT, ...)
                  - pattern: splitAsStream($MAT, ...)
            - metavariable-analysis:
                analyzer: redos
                metavariable: $REG
          - patterns:
            - pattern: java.util.regex.Pattern.matches("$REG", "$MAT")
            - metavariable-analysis:
                analyzer: redos
                metavariable: $REG
          - pattern: (java.util.function.Predicate $PRE).test("$MAT")
          - patterns:
            - pattern: (String $REG).$METHOD(...)
            - metavariable-pattern:
                metavariable: $METHOD
                pattern-either:
                  - pattern: matches("$MAT")
                  - pattern: split("$MAT", ...)
                  - pattern: replaceAll("$MAT", ...)
                  - pattern: replaceFirst("$MAT", ...)
            - metavariable-analysis:
                analyzer: redos
                metavariable: $REG
          - patterns:
            - pattern: (com.google.common.base.Splitter $SPLITTER).onPattern($REG).$METHOD($MAT)
            - metavariable-pattern:
                metavariable: $METHOD
                pattern-either:
                  - pattern: split($MAT)
                  - pattern: splitToList($MAT)
            - metavariable-analysis:
                analyzer: redos
                metavariable: $REG
      - patterns:
        - pattern-either:
          - pattern: while($COND) {...}
          - pattern: do {...} while($COND);
          - pattern: for($INIT;$COND;$BOUNDARY) {...}
        - focus-metavariable: $COND
      - patterns:
        - pattern: new $ARRAY[$SIZE]
        - focus-metavariable: $COND
    message: Semgrep found a DoS pattern
    languages:
      - java
    severity: WARNING
    metadata:
      references:
        - https://sourcegraph.com/github.com/github/codeql/-/blob/java/ql/lib/semmle/code/java/regex/RegexFlowModels.qll
        - https://sourcegraph.com/github.com/github/codeql/-/blob/java/ql/lib/semmle/code/java/regex/RegexFlowConfigs.qll
        - https://sourcegraph.com/github.com/github/codeql/-/blob/java/ql/src/Likely
          Bugs/Resource Leaks
