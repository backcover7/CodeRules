rules:
  - id: ${node} 
    options:
      symbolic_propagation: true
    pattern-either:
      - pattern-either:
        - pattern: (scala.sys.process.ProcessImpl.PipeThread $A).ProcessImpl$PipeThread$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.DummyProcess $A).ProcessImpl$DummyProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.OrProcess $A).ProcessImpl$OrProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessBuilderImpl.OrBuilder $A).createProcess(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessBuilderImpl.AndBuilder $A).createProcess(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessBuilderImpl.BasicBuilder $A).createProcess(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessBuilderImpl.PipedBuilder $A).createProcess(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.PipeSink $A).ProcessImpl$PipeSink$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.SequentialProcess $A).ProcessImpl$SequentialProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.PipeSource $A).ProcessImpl$PipeSource$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.BasicProcess $A).ProcessImpl$BasicProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.SimpleProcess $A).ProcessImpl$SimpleProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.AndProcess $A).ProcessImpl$AndProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.CompoundProcess $A).ProcessImpl$CompoundProcess$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessImpl.ProcessSequence $A).ProcessImpl$ProcessSequence$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.Process$ $A).apply(...)
        - pattern: (scala.sys.process.ProcessImpl.PipedProcesses $A).ProcessImpl$PipedProcesses$$$outer(...). ... .apply(...)
        - pattern: (scala.sys.process.ProcessBuilderImpl.SequenceBuilder $A).createProcess(...). ... .apply(...)
      - pattern: (scala.sys.process.package$ $A).stringToProcess(...)
      - pattern: (scala.sys.process.package$ $A).stringSeqToProcess(...)
    message: Semgrep found a match of method in ${node} csv
    languages: [java]
    severity: WARNING